name: Create Release

on:
  pull_request:
    branches: [ main, staging ]
    types: [ closed ]

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  get_next_release_version:
    name: Get Next Release Version
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    outputs:
      next_release_version: ${{ steps.get-next-release-version.outputs.next-version }}
      next_release_type: ${{ steps.get-next-release-type.outputs.next_release_type }}
    steps:
      - name: Get Latest Release
        id: get-latest-release
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        with:
          owner: alantbarlow
          repo: maze-prodigy
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Latest Release Version
        id: get-latest_release_version
        run: |
          if [ ${{ steps.get-latest-release.outputs.release }} == '' ]; then
            echo "version=v0.0.0" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.get-latest-release.outputs.release }}" >> $GITHUB_OUTPUT
          fi
      - name: Get Pull Request Label
        id: get-pull-request-label
        uses: zwaldowski/match-label-action@v4
        with:
          allowed: major, feature, bug, pre
          default_match: none
      - name: Get Next Release Type
        id: get-next-release-type
        env:
          IS_MAIN: ${{ github.base_ref == 'main' }}
        run: |
          if [ ${{ env.IS_MAIN }} && ${{ steps.get-pull-request-label.outputs.match }} == 'none' ]; then
            echo "next_release_type=none" >> $GITHUB_OUTPUT
          elif [ !${{ env.IS_MAIN }} ]; then
            echo "next_release_type=pre" >> $GITHUB_OUTPUT
          else
            echo "next_release_type=${{ steps.get-pull-request-label.outputs.match }}" >> $GITHUB_OUTPUT
          fi
      - name: Get Next Release Version
        if: ${{ steps.get-next-release-type.outputs.next_release_type }} != 'none'
        id: get-next-release-version
        uses: christian-draeger/increment-semantic-version@1.1.0
        with:
          current-version: '${{ steps.get-latest_release_version.outputs.version }}'
          version-fragment: '${{ steps.get-next-release-type.outputs.next_release_type }}'


  build_artifacts:
    name: 'Build Artifact for ${{ matrix.OS_NAME }}'
    needs: get_next_release_version
    if: ${{ needs.get_next_release_version.outputs.next_release_type }} != 'none'
    runs-on: ${{ matrix.OS_VERSION }}
    env:
      EXE_FILE_NAME: MazeProdigy
      ZIP_FILE_NAME: MazeProdigy-${{ matrix.OS_NAME }}
    strategy:
      matrix:
        include:
          - OS_VERSION: macos-latest
            OS_NAME: MacOS
            DATA_SEPARATOR: ":"
          - OS_VERSION: windows-latest
            OS_NAME: Windows
            DATA_SEPARATOR: ";"    
    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v3
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Setup Project Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build Artifact
        run: pyinstaller maze_prodigy/__main__.py --name "${{ env.EXE_FILE_NAME }}" --windowed --onefile
          --add-data "maze_prodigy/assets/themes/*.json${{ matrix.DATA_SEPARATOR }}themes"
          --add-data "maze_prodigy/assets/images/*.png${{ matrix.DATA_SEPARATOR }}images"
      - name: Compress Artifact
        uses: thedoctor0/zip-release@0.7.1
        with:
          filename: ${{ env.ZIP_FILE_NAME }}.zip
          directory: "dist"
          path: "${{ env.EXE_FILE_NAME }}.*"
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_FILE_NAME }}
          path: dist/${{ env.ZIP_FILE_NAME }}.zip


  create_release:
    name: Create Release
    needs: [ get_next_release_version, build_artifacts ]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        id: download-artifacts
        uses: actions/download-artifact@v3
        with: 
          path: artifacts
      - name: Create Release
        id: create-release
        uses: meeDamian/github-release@2.0
        env:
          DOWNLOAD_PATH: ${{ steps.download-artifacts.outputs.download-path }}
          NEXT_RELEASE_VERSION: ${{ needs.get_next_release_version.outputs.next_release_version }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'v${{ needs.get_next_release_version.outputs.next_release_version }}'
          name: 'Release v${{ needs.get_next_release_version.outputs.next_release_version }}'
          commitish: ${{ github.event.pull_request.merge_commit_sha }}
          prerelease: ${{ needs.get_next_release_version.outputs.next_release_type == 'pre' }}
          files: >
            MazeProdigy-Windows-v${{ env.NEXT_RELEASE_VERSION }}:artifacts/mazeprodigy-windows/mazeprodigy-windows.zip
            MazeProdigy-MacOS-v${{ env.NEXT_RELEASE_VERSION }}:artifacts/mazeprodigy-macos/mazeprodigy-macos.zip